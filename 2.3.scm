(define (accumulate op initial sequence)
    (if (null? sequence)
        initial
        (op (car sequence)
            (accumulate op initial (cdr sequence))
        )
    )
)

(define (map-m p sequence)
    (accumulate 
        (lambda (x y) 
            (cons (p x) y)
        )
        '() 
        sequence
    )
)
(define (append-m seq1 seq2)
    (accumulate cons seq2 seq1)
)
(define (length-m sequence)
    (accumulate (lambda (x y) (+ 1 y)) 0 sequence)
)
(define (horner-eval x coefficient-sequence)
    (accumulate (lambda (this-coeff higher-term) (+ (* x higher-term) this-coeff))
     0 coefficient-sequence)
)

(define (count-leaves-m t1)
    (accumulate + 0 (if (not (pair? t1)) (list 1) (map count-leaves-m t1)))
)
(define (accumulate-n op init seqs)
    (if (null? (car seqs))
    '()
    (cons (accumulate op init (accumulate (lambda (x y) (cons (car x) y)) '() seqs))
        (accumulate-n op init (accumulate (lambda (x y) (cons (cdr x) y)) '() seqs)))
    )
)

(define (dot-product v w)
   (accumulate + 0 (accumulate-n * 1 (list v w)))
)