(define (make-rat n d) 
(cond ((> (* n d) 0) (cons (abs n) (abs d)))
        ((and (= n 0) (not (= d 0))) (cons 0 d))
        (else (cons (- (abs n)) (abs d)))))

(define (numer x) (car x))

(define (denom x) (cdr x))

(define (print-rat x)
    (newline)
    (display (numer x))
    (display "/")
    (display (denom x))
)

(define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                (* (numer y) (denom x)))
                (* (denom x) (denom y)))
)
(define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                (* (numer y) (denom x)))
                (* (denom x) (denom y)))
)
(define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
        (* (denom x) (denom y)))
)
(define (div-rat x y)
    (make-rat (* (numer x) (denom y))
        (* (denom x) (numer y)))
)
(define (equal-rat? x y)
    (= (* (numer x) (denom y))
        (* (numer y) (denom x)))
)

(define (make-point x y) (cons x y))